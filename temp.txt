
<JackClass> [
<Keyword> class </Keyword>, 
<Name> 
<Identifier> KillMeNow </Identifier> 
</Name>, 
<Symbol> { </Symbol>, [
<ClassVarDec> [
<Keyword> static </Keyword>, 
<JackType> 
<Keyword> int </Keyword> 
</JackType>, [
<Name> 
<Identifier> fuck </Identifier> 
</Name>, 
<Symbol> , </Symbol>, 
<Name> 
<Identifier> shit </Identifier> 
</Name>, 
<Symbol> , </Symbol>, 
<Name> 
<Identifier> piss </Identifier> 
</Name>], 
<Symbol> ; </Symbol>] 
</ClassVarDec>, 
<ClassVarDec> [
<Keyword> field </Keyword>, 
<JackType> 
<Keyword> boolean </Keyword> 
</JackType>, [
<Name> 
<Identifier> snap </Identifier> 
</Name>, 
<Symbol> , </Symbol>, 
<Name> 
<Identifier> crackle </Identifier> 
</Name>, 
<Symbol> , </Symbol>, 
<Name> 
<Identifier> pop </Identifier> 
</Name>], 
<Symbol> ; </Symbol>] 
</ClassVarDec>], [
<SubroutineDec> [
<Keyword> constructor </Keyword>, 
<JackType> 
<Keyword> int </Keyword> 
</JackType>, 
<SubroutineName> 
<Identifier> fakeMethod </Identifier> 
</SubroutineName>, 
<Symbol> ( </Symbol>, [[
<Keyword> int </Keyword>, 
<Identifier> x </Identifier>], [
<Keyword> int </Keyword>, 
<Identifier> y </Identifier>], [
<Keyword> boolean </Keyword>, 
<Identifier> z </Identifier>]], 
<Symbol> ) </Symbol>, 
<SubroutineBody> [
<Symbol> { </Symbol>, [
<VarDec> [
<Keyword> var </Keyword>, 
<JackType> 
<Keyword> int </Keyword> 
</JackType>, [
<Name> 
<Identifier> a </Identifier> 
</Name>, 
<Symbol> , </Symbol>, 
<Name> 
<Identifier> b </Identifier> 
</Name>], 
<Symbol> ; </Symbol>] 
</VarDec>, 
<VarDec> [
<Keyword> var </Keyword>, 
<JackType> 
<Keyword> boolean </Keyword> 
</JackType>, 
<Name> 
<Identifier> c </Identifier> 
</Name>, 
<Symbol> ; </Symbol>] 
</VarDec>], [
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> a </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> x </Identifier> 
</Name> 
</Term>, 
<OpTerm> (
<Symbol> + </Symbol>, 
<Term> 
<Name> 
<Identifier> y </Identifier> 
</Name> 
</Term>) 
</OpTerm>] 
</Expression>] 
</LetStatement>, 
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> c </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> z </Identifier> 
</Name> 
</Term>] 
</Expression>] 
</LetStatement>, 
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> b </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<IntegerConstant> 5 </IntegerConstant> 
</Term>] 
</Expression>] 
</LetStatement>, 
<WhileStatement> [
<Keyword> while </Keyword>, 
<Symbol> ( </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> b </Identifier> 
</Name> 
</Term>, 
<OpTerm> (
<Symbol> &lt; </Symbol>, 
<Term> 
<IntegerConstant> 3 </IntegerConstant> 
</Term>) 
</OpTerm>] 
</Expression>, 
<Symbol> ) </Symbol>, 
<Symbol> { </Symbol>, [
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> b </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> b </Identifier> 
</Name> 
</Term>, 
<OpTerm> (
<Symbol> - </Symbol>, 
<Term> 
<IntegerConstant> 1 </IntegerConstant> 
</Term>) 
</OpTerm>] 
</Expression>] 
</LetStatement>], 
<Symbol> } </Symbol>] 
</WhileStatement>, 
<ReturnStatement> [
<Keyword> return </Keyword>, 
<Expression> [
<Term> 
<Name> 
<Identifier> c </Identifier> 
</Name> 
</Term>] 
</Expression>, 
<Symbol> ; </Symbol>] 
</ReturnStatement>], 
<Symbol> } </Symbol>] 
</SubroutineBody>] 
</SubroutineDec>, 
<SubroutineDec> [
<Keyword> constructor </Keyword>, 
<JackType> 
<Keyword> int </Keyword> 
</JackType>, 
<SubroutineName> 
<Identifier> fakeMethod2 </Identifier> 
</SubroutineName>, 
<Symbol> ( </Symbol>, [[
<Keyword> int </Keyword>, 
<Identifier> x </Identifier>], [
<Keyword> int </Keyword>, 
<Identifier> y </Identifier>], [
<Keyword> boolean </Keyword>, 
<Identifier> z </Identifier>]], 
<Symbol> ) </Symbol>, 
<SubroutineBody> [
<Symbol> { </Symbol>, [
<VarDec> [
<Keyword> var </Keyword>, 
<JackType> 
<Keyword> int </Keyword> 
</JackType>, [
<Name> 
<Identifier> a </Identifier> 
</Name>, 
<Symbol> , </Symbol>, 
<Name> 
<Identifier> b </Identifier> 
</Name>], 
<Symbol> ; </Symbol>] 
</VarDec>, 
<VarDec> [
<Keyword> var </Keyword>, 
<JackType> 
<Keyword> boolean </Keyword> 
</JackType>, 
<Name> 
<Identifier> c </Identifier> 
</Name>, 
<Symbol> ; </Symbol>] 
</VarDec>], [
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> a </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> x </Identifier> 
</Name> 
</Term>, 
<OpTerm> (
<Symbol> + </Symbol>, 
<Term> 
<Name> 
<Identifier> y </Identifier> 
</Name> 
</Term>) 
</OpTerm>] 
</Expression>] 
</LetStatement>, 
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> c </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> z </Identifier> 
</Name> 
</Term>] 
</Expression>] 
</LetStatement>, 
<LetStatement> [
<Keyword> let </Keyword>, 
<Name> 
<Identifier> b </Identifier> 
</Name>, 
<Symbol> = </Symbol>, 
<Expression> [
<Term> 
<Name> 
<Identifier> a </Identifier> 
</Name> 
</Term>, 
<OpTerm> (
<Symbol> + </Symbol>, 
<Term> 
<Name> 
<Identifier> c </Identifier> 
</Name> 
</Term>) 
</OpTerm>] 
</Expression>] 
</LetStatement>, 
<ReturnStatement> [
<Keyword> return </Keyword>, 
<Expression> [
<Term> 
<Name> 
<Identifier> c </Identifier> 
</Name> 
</Term>] 
</Expression>, 
<Symbol> ; </Symbol>] 
</ReturnStatement>], 
<Symbol> } </Symbol>] 
</SubroutineBody>] 
</SubroutineDec>], 
<Symbol> } </Symbol>] 
</JackClass>