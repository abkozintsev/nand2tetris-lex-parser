([(class, Keyword), ((Main, Identifier), Name), ({, Symbol), [([(static, Keyword), ((boolean, Keyword), JackType), [((test, Identifier), Name), (,, Symbol), ((two, Identifier), Name), (,, Symbol), ((three, Identifier), Name)], (;, Symbol)], ClassVarDec), ([(field, Keyword), ((int, Keyword), JackType), [((hi, Identifier), Name), (,, Symbol), ((bye, Identifier), Name), (,, Symbol), ((my, Identifier), Name)], (;, Symbol)], ClassVarDec), ([(static, Keyword), ((int, Keyword), JackType), [((four, Identifier), Name), (,, Symbol), ((five, Identifier), Name)], (;, Symbol)], ClassVarDec)], [([(function, Keyword), ((void, Keyword), JackType), ((main, Identifier), SubroutineName), ((, Symbol), ([], ParameterList), (), Symbol), ([({, Symbol), [([(var, Keyword), (((SquareGame, Identifier), Name), JackType), ((game, Identifier), Name), (;, Symbol)], VarDec)], 
<statements> [([(let, Keyword), ((game, Identifier), Name), (=, Symbol), ([(([((new, Identifier), SubroutineName), ((, Symbol), ([], ExpressionList), (), Symbol)], SubroutineCall), Term)], Expression), (;, Symbol)], LetStatement), ([(do, Keyword), ([[((game, Identifier), Name)], (., Symbol), ((run, Identifier), SubroutineName), ((, Symbol), ([], ExpressionList), (), Symbol)], SubroutineCall), (;, Symbol)], DoStatement), ([(do, Keyword), ([[((game, Identifier), Name)], (., Symbol), ((dispose, Identifier), SubroutineName), ((, Symbol), ([], ExpressionList), (), Symbol)], SubroutineCall), (;, Symbol)], DoStatement), ([(return, Keyword), (;, Symbol)], ReturnStatement)] 
</statements>, (}, Symbol)], SubroutineBody)], SubroutineDec), ([(function, Keyword), ((void, Keyword), JackType), ((more, Identifier), SubroutineName), ((, Symbol), ([], ParameterList), (), Symbol), ([({, Symbol), [([(var, Keyword), ((int, Keyword), JackType), [((i, Identifier), Name), (,, Symbol), ((j, Identifier), Name)], (;, Symbol)], VarDec), ([(var, Keyword), (((String, Identifier), Name), JackType), ((s, Identifier), Name), (;, Symbol)], VarDec), ([(var, Keyword), (((Array, Identifier), Name), JackType), ((a, Identifier), Name), (;, Symbol)], VarDec)], 
<statements> [([(if, Keyword), ((, Symbol), ([((false, Keyword), Term)], Expression), (), Symbol), ({, Symbol), 
<statements> [([(let, Keyword), ((s, Identifier), Name), (=, Symbol), ([((string constant, StringConstant), Term)], Expression), (;, Symbol)], LetStatement), ([(let, Keyword), ((s, Identifier), Name), (=, Symbol), ([((null, Keyword), Term)], Expression), (;, Symbol)], LetStatement), ([(let, Keyword), ((a, Identifier), Name), ([, Symbol), [([((1, IntegerConstant), Term)], Expression)], (], Symbol), (=, Symbol), ([([((a, Identifier), Name), ([, Symbol), [([((2, IntegerConstant), Term)], Expression)], (], Symbol)], Term)], Expression), (;, Symbol)], LetStatement)] 
</statements>, (}, Symbol), (else, Keyword), ({, Symbol), 
<statements> [([(let, Keyword), ((i, Identifier), Name), (=, Symbol), ([(((i, Identifier), Name), Term), (((*, Symbol), ([((, Symbol), ([([((-, Symbol), UnaryOp), (((j, Identifier), Name), Term)], Term)], Expression), (), Symbol)], Term)), OpTerm)], Expression), (;, Symbol)], LetStatement), ([(let, Keyword), ((j, Identifier), Name), (=, Symbol), ([(((j, Identifier), Name), Term), (((/, Symbol), ([((, Symbol), ([([((-, Symbol), UnaryOp), ((2, IntegerConstant), Term)], Term)], Expression), (), Symbol)], Term)), OpTerm)], Expression), (;, Symbol)], LetStatement), ([(let, Keyword), ((i, Identifier), Name), (=, Symbol), ([(((i, Identifier), Name), Term), (((|, Symbol), (((j, Identifier), Name), Term)), OpTerm)], Expression), (;, Symbol)], LetStatement)] 
</statements>, (}, Symbol)], IfStatement), ([(return, Keyword), (;, Symbol)], ReturnStatement)] 
</statements>, (}, Symbol)], SubroutineBody)], SubroutineDec)], (}, Symbol)], JackClass)